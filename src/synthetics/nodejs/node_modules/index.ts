const synthetics = require('Synthetics');
const aws = require('aws-sdk');

//note: for some reason, the canary only identifies the index.ts
//and doesnt allow to have external files.
//please create any additional functions in the same file for this canary.

export const testConfig = {
  testItemId: '3533547984',
  //add any test data here
};

async function getPocketTestCredentials() {
  const isDev = process.env.NODE_ENV === 'development';
  const environment = isDev ? 'Dev' : 'Prod';
  console.log(`process.env.NODE_ENV: ${process.env.NODE_ENV}`);
  console.log(`environment: ${environment}`);

  let ssm = new aws.SSM();
  //TODO: we can read all secrets from a single parameter.
  //but JSON parsing doesn't work, so fetching them separately.
  let params = {
    Name: `/CanaryTests/${environment}/Canary/savedItems/pocketTestCredentials/accessToken`,
    WithDecryption: true,
  };
  let a = await ssm.getParameter(params).promise();
  let accessKey = a.Parameter.Value;
  params = {
    Name: `/CanaryTests/${environment}/Canary/savedItems/pocketTestCredentials/consumerKey`,
    WithDecryption: true,
  };
  let c = await ssm.getParameter(params).promise();
  let consumerKey = await c.Parameter.Value;

  return {
    accessToken: accessKey,
    consumerKey: consumerKey,
  };
}

async function pollSavedItemById(testItemId, validatePositiveCase) {
  console.log(`executing test for item ID -> ${testItemId}`);
  let testCredentials = await getPocketTestCredentials();
  let requestOptionsStep1 = {
    hostname: `getpocket.com`,
    method: 'POST',
    path: `/graphql?consumer_key=${testCredentials.consumerKey}&access_token=${testCredentials.accessToken}`,
    port: 443,
    protocol: 'https:',
    body: JSON.stringify({
      query: `query getSavedItem($itemId: ID!) {
        user {
          savedItemById(id: $itemId) {
            id
            url
            isFavorite
          }
        }
      }`,
      variables: { itemId: testItemId },
    }),
  };

  let headers = {
    //todo: can change to client-api url and add bearer auth tokens
  };
  headers['User-Agent'] = [
    synthetics.getCanaryUserAgentString(),
    headers['User-Agent'],
  ].join(' ');
  headers['apollographql-client-name'] = 'clientapi-canary'; //todo: update
  headers['apollographql-client-version'] = '1.0';
  headers['Content-Type'] = 'application/json';
  requestOptionsStep1['headers'] = headers;

  // By default headers, post data and response body are not included in the report for security reasons.
  // Change the configuration at global level or add as step configuration for individual steps
  let stepConfig = {
    includeRequestHeaders: true,
    includeResponseHeaders: true,
    restrictedHeaders: ['X-Amz-Security-Token', 'Authorization'], // Restricted header values do not appear in report generated.
    includeRequestBody: true,
    includeResponseBody: true,
  };

  await synthetics.executeHttpStep(
    `Verify GQL response for User -> savedItemById for id: ${testItemId} query`,
    requestOptionsStep1,
    validatePositiveCase,
    stepConfig
  );
}

const apiCanaryBlueprint = async function () {
  // Handle validation for positive scenario
  const validatePositiveCase = async function (res) {
    return new Promise<void>((resolve, reject) => {
      if (res.statusCode < 200 || res.statusCode > 299) {
        throw res.statusCode + ' ' + res.statusMessage;
      }
      let responseBody = '';
      res.on('data', (d) => {
        responseBody += d;
      });
      console.log(`${JSON.stringify(responseBody)}`);
      res.on('end', () => {
        // Add validation on 'responseBody' here if required. For ex, your status code is 200 but data might be empty
        if (JSON.parse(responseBody)['errors']) {
          throw `Failed Response Body: ${responseBody}`;
        }
        resolve();
      });
    });
  };

  const testItemId = testConfig.testItemId;
  return await pollSavedItemById(testItemId, validatePositiveCase);
};

export const handler = async function getHandler() {
  return await apiCanaryBlueprint();
};
